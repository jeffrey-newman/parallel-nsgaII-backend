//
//  Checkpoint.hpp
//  NSGA-Parallel-Backend
//
//  Created by a1091793 on 25/11/2015.
//
//

#ifndef Checkpoint_h
#define Checkpoint_h

#include <boost/serialization/nvp.hpp>
#include <boost/foreach.hpp>


class CheckpointBase
{
    virtual bool operator() (PopulationSPtr population) = 0;
};

class DummyCheckpoint : public CheckpointBase
{
public:
    bool
    operator()(PopulationSPtr population)
    {
        return true;
    }
};

class Checkpoints
{
private:
    std::vector<CheckpointBase &> my_checkpoints;
    
public:
    Checkpoints()
    {
        
    }
    
    addCheckpoint(CheckpointBase & checkpoint_2_add)
    {
        my_checkpoints.push_back(checkpoint_2_add);
    }
    
    bool
    operator()(PopulationSPtr population)
    {
        bool do_continue = true;
        BOOST_FOREACH(CheckpointBase & base, my_checkpoints)
        {
            do_continue = (do_continue && base.operator ()(population));
        }
    }
};

class MaxGenCheckpoint : public CheckpointBase
{
    int max_gen;
    int gen_number;
    
public:
    Checkpoint(int _max_gen)
    : max_gen(_max_gen), gen_number(0)
    {
        
    }
    
    bool
    operator()(PopulationSPtr population)
    {
        ++gen_number;
        if (gen_number > max_gen)
        {
            return false;
        }
        return true;
    }

    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version)
    {
            ar & BOOST_SERIALIZATION_NVP(max_gen);
            ar & BOOST_SERIALIZATION_NVP(gen_number);
    }
};



#endif /* Checkpoint_h */
