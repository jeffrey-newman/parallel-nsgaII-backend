#ifndef SERIALISECHECKPOINT_HPP
#define SERIALISECHECKPOINT_HPP

#include "../Checkpoint.hpp"
#include <boost/archive/xml_iarchive.hpp>
#include <boost/archive/xml_oarchive.hpp>
#include <boost/filesystem.hpp>

#ifndef BOOST_SERIALIZATION_PATH_HPP 
#define BOOST_SERIALIZATION_PATH_HPP 
// MS compatible compilers support #pragma once 
#if defined(_MSC_VER) && (_MSC_VER >= 1020) 
#pragma once 
#endif 
#include <boost/config.hpp> 
#include <boost/filesystem/path.hpp> 
#include <boost/serialization/level.hpp> 
BOOST_CLASS_IMPLEMENTATION(boost::filesystem::path, boost::serialization::primitive_type) 
#ifndef BOOST_NO_STD_WSTRING 
BOOST_CLASS_IMPLEMENTATION(boost::filesystem::wpath, boost::serialization::primitive_type) 
#endif 
namespace boost { namespace serialization { 
template<class Archive, class String, class Traits> 
void serialize(Archive& ar, boost::filesystem::basic_path<String, Traits>& p, 
                const unsigned int version) 
{ 
     String s; 
     if(Archive::is_saving::value) 
         s = p.string(); 
     ar & boost::serialization::make_nvp("string", s); 
     if(Archive::is_loading::value) 
         p = s; 
} 
}} 
#endif 


class SerialiseCheckpoint : public CheckpointBase
{

    int gen_frequency;
    int gen_number;
    NSGAII & nsgaii_engine;
    boost::filesystem::path save_path;

public:
    SerialiseCheckpoint(int _gen_frequency, NSGAII & _nsgaii_engine, boost::filesystem::path _save_path)
    : gen_frequency(_gen_frequency), gen_number(0), nsgaii_engine(_nsgaii_engine), save_path(_save_path)
    {

    }

    bool
    operator()(PopulationSPtr population)
    {
        ++gen_number;
        if (gen_number % gen_frequency == 0)
        {
            boost::filesystem::path save_file = save_path / ("nsgaii_gen" + std::to_string(gen_number) + ".xml");
            std::ofstream ofs(save_file.c_str());
            assert(ofs.good());
            boost::archive::xml_oarchive oa(ofs);
            oa << BOOST_SERIALIZATION_NVP(nsgaii_engine);
        }
        return true;
    }

    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & ar, const unsigned int version)
    {
            ar & BOOST_SERIALIZATION_NVP(gen_frequency);
            ar & BOOST_SERIALIZATION_NVP(gen_number);
    }
};

#endif // SERIALISECHECKPOINT_HPP
